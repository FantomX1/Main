buildscript {	
	repositories {
	    jcenter()
		// make it easy to test a snapshot version of goomph
		maven {	url 'https://oss.sonatype.org/content/repositories/snapshots/' }
		// grab dependencies from the gradle plugin portal
		maven { url 'https://plugins.gradle.org/m2/' }
		mavenCentral()
	}
	// make sure we don't cache stale snapshot versions
	configurations.all {
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	}
	dependencies {
		// a bunch of eclipse stuff
		classpath "com.diffplug.gradle:goomph:${VER_GOOMPH}"
		// creates a targetplatform
		classpath "org.standardout:bnd-platform:${VER_BND_PLATFORM}"
        // shadow, for creating a fat jar
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.0"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

// we need this because classes from 'main' refer to classes from 'test'.
sourceSets.main.java.srcDir 'src/test/java'

sourceCompatibility = VER_JAVA
targetCompatibility = VER_JAVA

repositories {
	mavenCentral()
	jcenter()
	// local eclipse maven (created by Goomph)
    maven {
        url rootProject.file('target.p2/build/p2asmaven/maven')
	}
}
// we need the maven repo from p2
evaluationDependsOn(':target.p2')

repositories {
	flatDir {
		dirs 'lib'
	}
}

dependencies {
    // eclipse/p2 dependencies, imported with all the transitive dependencies
	// as maven artifacts.
    def repoDir = project(':target.p2').buildDir.path + "/p2asmaven/maven"

	// TODO this is not good! temporary solution
	// Include all the dependencies imported from p2. exclude problematic ones.
	// requires someone to maintain it.
    new File(repoDir + "/eclipse-deps").eachDir {d ->
        if (d.name.contains('tukaani.xz.source')) return // TODO maybe there is a better way to exclude source packages
		if (d.name.contains('jasper.glassfish')) return // unwanted transitive dependency
		if (d.name.contains('compiler.batch')) return // unwanted transitive dependency
		compile "eclipse-deps:" + d.name + ":+"
    }

	// TODO this is not good as well! temporary solution
    new File(repoDir + "/eclipse-deps-jgit").eachDir {d ->
        compile "eclipse-deps-jgit:" + d.name + ":+"
    }

	// TODO do we need this?
    // add SWT and the appropriate platform-native SWT for building and testing
    compile "eclipse-deps:org.eclipse.swt:+"
	compile "eclipse-deps:org.eclipse.swt.${com.diffplug.common.swt.os.SwtPlatform.getNative()}:+"


	compile project(':spartan')
	compile project(':fluent.ly')
	compile files('lib/cli-1.02.jar')
	compile group: 'org.jetbrains', name: 'annotations', version: '13.0'
	compile 'junit:junit:4.12'
	compile 'org.hamcrest:hamcrest-junit:2.0.0.0'
	compile "org.mockito:mockito-core:1.+"
}

eclipse {
	classpath {
		defaultOutputDir = file('target/classes')
	}
}
eclipse.classpath.file {
    whenMerged { classpath ->
        classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.Container('org.eclipse.pde.core.requiredPlugins'))
        classpath.entries.removeAll{entry -> entry.kind=='src' && entry.path=='src/main/resources'}
        classpath.entries.removeAll{entry -> entry.kind=='con' && entry.path=='org.eclipse.pde.core.requiredPlugins'}
    }
}
eclipse.project.file {
	whenMerged { project ->
		project.buildCommands += [
			new org.gradle.plugins.ide.eclipse.model.BuildCommand('org.eclipse.jdt.core.javabuilder'),
			new org.gradle.plugins.ide.eclipse.model.BuildCommand('org.eclipse.pde.ManifestBuilder'),
			new org.gradle.plugins.ide.eclipse.model.BuildCommand('org.eclipse.pde.SchemaBuilder'),
			new org.gradle.plugins.ide.eclipse.model.BuildCommand('org.eclipse.buildship.core.gradleprojectbuilder')
		]
		project.buildCommands.unique()
		project.natures += [
			'org.eclipse.buildship.core.gradleprojectnature',
			'org.eclipse.pde.PluginNature',
			'org.eclipse.jdt.core.javanature',
			'org.eclipse.jdt.core.javanature',
			'org.springframework.ide.eclipse.core.springnature'
		]
		project.natures.unique()
	}
}