package il.org.spartan.Leonidas.plugin.leonidas;

import com.intellij.psi.PsiElement;
import il.org.spartan.Leonidas.auxilary_layer.az;
import il.org.spartan.Leonidas.auxilary_layer.iz;
import il.org.spartan.Leonidas.auxilary_layer.step;
import il.org.spartan.Leonidas.plugin.leonidas.BasicBlocks.Encapsulator;
import il.org.spartan.Leonidas.plugin.leonidas.BasicBlocks.EncapsulatorVisitor;
import il.org.spartan.Leonidas.plugin.leonidas.BasicBlocks.Optional;

import java.util.*;
import java.util.stream.Collectors;


/**
 * A class responsible for the logic of matching the tree of the user to the definition of the tipper and extracting the
 * correct information of the tree of the user for the sake of future replacing.
 * @author michalcohen
 * @since 31-03-2017.
 */
public class Matcher {

    private final Map<Integer, List<Constraint>> constrains = new HashMap<>();
    private Encapsulator root;

    public Matcher() {
        root = null;
    }

    public Matcher(Encapsulator r, Map<Integer, List<Constraint>> map) {
        root = r;
        buildMatcherTree(this, map);
    }

    private List<Optional> getIndices(Encapsulator treeTemplate) {
        List<Optional> l = new ArrayList<>();
        treeTemplate.accept(new EncapsulatorVisitor() {
            @Override
            public void visit(Encapsulator n) {
                if (iz.optional(n)) {
                    l.add(az.optional(n));
                }
            }
        });
        return l;
    }

    public Map<Optional, Boolean> scaryRecur(Encapsulator treeTemplate, Encapsulator treeToMatch, int i, List<Optional> l, Map<Optional, Boolean> m) {
        if (i == l.size()) {
            return banana(treeTemplate, treeToMatch, m) ? m : null;
        }
        m.put(l.get(i), true);
        Map<Optional, Boolean> b1 = scaryRecur(treeTemplate, treeToMatch, i + 1, l, m);
        m.put(l.get(i), false);
        Map<Optional, Boolean> b2 = scaryRecur(treeTemplate, treeToMatch, i + 1, l, m);
        return b1 != null ? b1 : b2;
    }

    private boolean banana(Encapsulator treeTemplate, Encapsulator treeToMatch, Map<Optional, Boolean> m) {
        m.forEach(Optional::setActivate);
        return treeMatch(treeTemplate, treeToMatch);
    }

    /**
     * @param treeTemplate - the template tree generated by the TreeBuilder
     * @param treeToMatch  - the tree generated by the users' code
     * @return - true iff these two trees match by the Leonidas language.
     */
    @SuppressWarnings("ConstantConditions")
    private boolean treeMatch(Encapsulator treeTemplate, Encapsulator treeToMatch) {
        if (!iz.conforms(treeToMatch, treeTemplate)
                || iz.block(treeToMatch.getInner()) && !iz.genericBlock(treeTemplate)
                && treeTemplate.getInner().getUserData(KeyDescriptionParameters.NO_OF_STATEMENTS) != null
                && treeTemplate.getInner().getUserData(KeyDescriptionParameters.NO_OF_STATEMENTS)
                .notConforms(az.block(treeToMatch.getInner()).getStatements().length)
                && treeTemplate.getInner().getUserData(KeyDescriptionParameters.NO_OF_STATEMENTS) != null
                && treeTemplate.getInner().getUserData(KeyDescriptionParameters.NO_OF_STATEMENTS)
                .notConforms(az.block(treeToMatch.getInner()).getStatements().length))
            return false;
        boolean res = true;
        if (treeTemplate.getAmountOfNoneWhiteSpaceChildren() < treeToMatch.getAmountOfNoneWhiteSpaceChildren()
                && !iz.generic(treeTemplate))
            return false;
        for (Encapsulator.Iterator treeTemplateChild = treeTemplate.iterator(), treeToMatchChild = treeToMatch
                .iterator(); treeTemplateChild.hasNext() && treeToMatchChild.hasNext();
             treeTemplateChild.next(), treeToMatchChild.next()) {
            if (iz.optional(treeTemplateChild.value())) {
                boolean res1 = treeMatch(treeTemplateChild.value(), treeToMatchChild.value());
                boolean res2 = treeMatch(treeTemplateChild.peekNext(), treeToMatchChild.value());
                res &= (res1 || res2);
            }
            res &= treeMatch(treeTemplateChild.value(), treeToMatchChild.value());
        }
        return res;
    }

    /**
     * @param matcher builds recursively the matchers for the constraints that are relevant to the current matcher.
     * @param map a mapping between id of generic elements and lists of constraints.
     */
    private void buildMatcherTree(Matcher matcher, Map<Integer, List<Constraint>> map) {
        Set<Integer> l = matcher.getGenericElements();
        l.forEach(i -> java.util.Optional.ofNullable(map.get(i)).ifPresent(z -> z.forEach(j ->
                matcher.addConstraint(i, j))));
        matcher.getConstraintsMatchers().forEach(im -> buildMatcherTree(im, map));
    }

    public Encapsulator getRoot() {
        return root;
    }

    private void setRoot(Encapsulator n) {
        root = n;
    }

    /**
     * Adds a constraint on a generic element inside the tree of the root.
     *
     * @param id - the id of the element that we constraint.
     * @param c  - the constraint
     */
    private void addConstraint(Integer id, Constraint c) {
        constrains.putIfAbsent(id, new LinkedList<>());
        constrains.get(id).add(c);
    }

    /**
     * @return the matcher elements in all the constraints applicable on the root of this matcher.
     */
    private List<Matcher> getConstraintsMatchers() {
        return constrains.values().stream()
                .flatMap(Collection::stream)
                .collect(Collectors.toList())
                .stream()
                .map(Constraint::getMatcher)
                .collect(Collectors.toList());
    }

    /**
     * @param e the tree of the user
     * @return true iff the tree of the user matcher the root and holds through all the constraints.
     */
    public boolean match(PsiElement e) {
        List<Optional> l = getIndices(root);
        Map<Optional, Boolean> res = scaryRecur(root, Encapsulator.buildTreeFromPsi(e), 0, l, new HashMap<>());
        if (res == null) return false;
        res.forEach(Optional::setActivate);
        Map<Integer, PsiElement> info = extractInfo(root, e);

        return res != null && info.keySet().stream()
                .allMatch(id -> constrains.getOrDefault(id, new LinkedList<>()).stream().allMatch(c -> c.match(info.get(id))));
    }

    /**
     * @param treeTemplate - The root of a tree already been matched.
     * @param treeToMatch  - The patterns from which we extract the IDs
     * @return a mapping between an ID to a PsiElement
     */
    private Map<Integer, PsiElement> extractInfo(Encapsulator treeTemplate, PsiElement treeToMatch) {
        Map<Integer, PsiElement> mapping = new HashMap<>();
        Encapsulator.Iterator treeTemplateChile = treeTemplate.iterator();
        for (PsiElement treeToMatchChild = treeToMatch.getFirstChild(); treeTemplateChile.hasNext() && treeToMatchChild != null; treeTemplateChile.next(), treeToMatchChild = step.nextSibling(treeToMatchChild))
            if (treeTemplateChile.value().getUserData(KeyDescriptionParameters.ID) == null)
                mapping.putAll(extractInfo(treeTemplateChile.value(), treeToMatchChild));
			else
                mapping.put(treeTemplateChile.value().getUserData(KeyDescriptionParameters.ID),
                        treeToMatchChild);
        return mapping;
    }

    /**
     * @param treeToMatch - The patterns from which we extract the IDs
     * @return a mapping between an ID to a PsiElement
     */
    public Map<Integer, PsiElement> extractInfo(PsiElement treeToMatch) {
        return extractInfo(root, treeToMatch);
    }

    /**
     * @return list of Ids of all the generic elements in the tipper.
     */
    private Set<Integer> getGenericElements() {
        final Set<Integer> tmp = new HashSet<>();
        root.accept(e -> {
            if (iz.generic(e)) {
                tmp.add(e.getInner().getUserData(KeyDescriptionParameters.ID));
            }
        });
        return tmp;
    }

    /**
     * Represents a constraint on a generalized variable of the leonidas language.
     *
     * @author michalcohen
     * @since 01-04-2017.
     */
    public static class Constraint {

        private final ConstraintType type;
        private final Matcher matcher;

        public Constraint(ConstraintType t, Encapsulator e) {
            type = t;
            matcher = new Matcher();
            matcher.setRoot(e);
        }

        public ConstraintType getType() {
            return type;
        }

        public Matcher getMatcher() {
            return matcher;
        }

        /**
         * @param e the users tree to match.
         * @return indication of e being matched recursively to the matcher, when taking in consideration the type of the constraint.
         */
        public boolean match(PsiElement e) {
            return (type == ConstraintType.IS && matcher.match(e)) || (type == ConstraintType.IS_NOT && !matcher.match(e));
        }

        public enum ConstraintType {
            IS,
            IS_NOT
        }
    }
}

