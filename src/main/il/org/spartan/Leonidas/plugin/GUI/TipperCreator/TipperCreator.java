package il.org.spartan.Leonidas.plugin.GUI.TipperCreator;


import com.intellij.psi.PsiElement;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import il.org.spartan.Leonidas.auxilary_layer.step;
import il.org.spartan.Leonidas.plugin.leonidas.BasicBlocks.GenericPsiElementStub.StubName;

import javax.swing.*;
import java.awt.*;

/**
 * @author michalcohen, Anna Belozovsky
 * @since 24-02-17
 */
class TipperCreator extends JFrame {
    public String tipperName = "";
    private JPanel panel1;
    private JTextArea toCode;
    private JTextArea fromCode;
    private JButton Generalize;
    private JButton selectGenerics;
    private JButton matchGeneric;
    private JButton createTipperButton;
    private PsiElement root;
    private int genericElementIndex = 1;
    private int startOfMatchedFrom;
    private int endOfMatchedFrom;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    TipperCreator(PsiElement element) {
        super("Create new tipper");
        root = element;
        setContentPane(panel1);
        fromCode.setText(element.getText());
        toCode.setText(element.getText());
        pack();
        setVisible(true);
        Generalize.addActionListener(e -> generalizeClicked(element));
        selectGenerics.addActionListener(e -> selectClicked());
        matchGeneric.addActionListener(e -> matchClicked());
        createTipperButton.addActionListener(e -> createLeonidasTipper(element));
    }

    private void generalizeClicked(PsiElement element) {
        JTextArea focused = fromCode;
        if (toCode.getSelectedText() != null)
            focused = toCode;
        else if (fromCode.getSelectedText() == null)
            return;
        // start of problematic code
        PsiElement p = step.getHighestParent(element.findElementAt(focused.getSelectionStart()));
        StubName givenType = StubName.getGeneralType(p);
        // end
        focused.replaceSelection(givenType.stubMethodCallExpressionStatement());
    }

    private void selectClicked() {
        if (fromCode.getSelectedText() == null || StubName.valueOfStringExpression(fromCode.getSelectedText()) == null)
            return;
        startOfMatchedFrom = fromCode.getSelectionStart();
        endOfMatchedFrom = fromCode.getSelectionEnd();
        toCode.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }

    private void matchClicked() {
        if (toCode.getCursor().getType() != Cursor.HAND_CURSOR)
            return;
        toCode.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        if (StubName.valueOfStringExpression(toCode.getSelectedText()) == null)
            return;
        StubName stub1 = StubName
                .valueOfStringExpression(fromCode.getText().substring(startOfMatchedFrom, endOfMatchedFrom)),
                stub2 = StubName.valueOfStringExpression(toCode.getSelectedText());
        if (!stub1.equals(stub2))
            return;
        String toSelected = toCode.getSelectedText(),
                replaceString = toSelected.substring(0, toSelected.length() - 1) + genericElementIndex + ")";
        toCode.replaceSelection(replaceString);
        fromCode.replaceRange(replaceString, startOfMatchedFrom, endOfMatchedFrom);
        ++genericElementIndex;
    }

    private void createLeonidasTipper(PsiElement element) {
        if (fromCode.getText().matches("\\s*")) {
            JOptionPane.showMessageDialog(this, "Origin code cannot be empty.");
            return;
        }
        new TipperNameCreator(this);
        if (tipperName.equals("")) {
            return;
        }
        String tipperTemplate = "package il.org.spartan.Leonidas.plugin.tippers.leonidas;\n" +
                "\n" +
                "import il.org.spartan.Leonidas.plugin.leonidas.Leonidas;\n" +
                "\n" +
                "import static il.org.spartan.Leonidas.plugin.leonidas.GenericPsiElementStub.*;\n" +
                "import static il.org.spartan.Leonidas.plugin.leonidas.The.the;\n" +
                "\n" +
                "public class " + tipperName +
                " implements LeonidasTipperDefinition {\n" +
                "\n" +
                "    /**\n" +
                "     * Write here additional constraints on the matcher tree.\n" +
                "     * The constraint are of the form:\n" +
                "     * the(<generic element>(<id>)).{is/isNot}(() - > <template>)[.ofType(Psi class)];\n" +
                "     */\n" +
                "    @Override\n" +
                "    public void constraints() {\n" +
                "    }\n" +
                "\n" +
                "    @Override\n" +
                "    /* If clarification of the type of the tipper\n" +
                "     * is needed, use the annotation @Leonidas(<Psi Class>)\n" +
                "     * when psi class is the class of the element on which the tipper applied\n" +
                "     */\n" +
                "    public void matcher() {\n" +
                "        new Template(() -> {\n" +
                "            //<template>\n" + fromCode.getText() +
                "        });\n" +
                "    }\n" +
                "\n" +
                "    @Override\n" +
                "    /* If clarification the type of the tipper\n" +
                "     * is needed, use the annotation @Leonidas(<Psi Class>)\n" +
                "     * when psi class is the class of the element on which the tipper applied\n" +
                "     */\n" +
                "    public void replacer() {\n" +
                "        new Template(() -> {\n" +
                "            //<template>\n" + toCode.getText() +
                "        });\n" +
                "    }\n" +
                "}";

//        URL is = getClass().getClassLoader().getResource("il/org/spartan/Leonidas/plugin/tippers/leonidas/nam");
//        File file = new File(is.getPath());
//        FileType type = FileTypeRegistry.getInstance().getFileTypeByFileName(file.getName());
//        file.setReadable(true, false);
//        String s = IOUtils.toString(new BufferedReader(new InputStreamReader(getClass().getResourceAsStream("/spartanizer/SpartanizerUtils.java"))));
//        PsiFile pf = PsiFileFactory.getInstance(e.getProject()).createFileFromText("SpartanizerUtils.java", type, s);
//        d.add(pf);
//        Arrays.stream(d.getFiles()).filter(f -> "SpartanizerUtils.java".equals(f.getName())).findFirst().get().getVirtualFile().setWritable(false);
//        Toolbox.getInstance().excludeFile(pf);
//        return pf;


//        URL is = getClass().getClassLoader().getResource("il/org/spartan/Leonidas/plugin/tippers/leonidas");
//        PsiDirectory psiDirectory=

    }

    @SuppressWarnings("ResultOfMethodCallIgnored")
    public void applyLeonidasTipper() {
        root.getText();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 2, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 5, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(400, 600), null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel2.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        fromCode = new JTextArea();
        fromCode.setText("Insert template code here");
        scrollPane1.setViewportView(fromCode);
        final JScrollPane scrollPane2 = new JScrollPane();
        panel2.add(scrollPane2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        toCode = new JTextArea();
        toCode.setText("Insert template code here");
        scrollPane2.setViewportView(toCode);
        final JLabel label1 = new JLabel();
        label1.setText("from");
        panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("to");
        panel2.add(label2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        selectGenerics = new JButton();
        selectGenerics.setText("Select Generic Components");
        selectGenerics.setMnemonic('S');
        selectGenerics.setDisplayedMnemonicIndex(0);
        panel1.add(selectGenerics, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        matchGeneric = new JButton();
        matchGeneric.setText("Match Generic Components");
        matchGeneric.setMnemonic('M');
        matchGeneric.setDisplayedMnemonicIndex(0);
        panel1.add(matchGeneric, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel3, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        createTipperButton = new JButton();
        createTipperButton.setText("Create Tipper");
        panel3.add(createTipperButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel3.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        Generalize = new JButton();
        Generalize.setText("Generalize Content");
        Generalize.setMnemonic('G');
        Generalize.setDisplayedMnemonicIndex(0);
        Generalize.setToolTipText("make a specific code represent a more generalized contents such as expressions, statements, blocks and many more.");
        panel1.add(Generalize, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
