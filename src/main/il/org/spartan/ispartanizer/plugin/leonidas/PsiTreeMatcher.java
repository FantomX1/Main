package il.org.spartan.ispartanizer.plugin.leonidas;

import il.org.spartan.ispartanizer.auxilary_layer.az;
import il.org.spartan.ispartanizer.auxilary_layer.iz;
import il.org.spartan.ispartanizer.plugin.EncapsulatingNode;

/**
 * This class finds matches between template tree and a tree generated by
 * the users' code.
 *
 * @author AnnaBel7 and michal cohen
 * @since 06-01-2017.
 */
public class PsiTreeMatcher {

    /**
     * @param treeTemplate - the template tree generated by the TreeBuilder
     * @param treeToMatch  - the tree generated by the users' code
     * @return - true iff these two trees match by the Leonidas language.
     */
    @SuppressWarnings("ConstantConditions")
    public static boolean match(EncapsulatingNode treeTemplate, EncapsulatingNode treeToMatch) {
        if (!iz.conforms(treeToMatch.getInner(), treeTemplate.getInner())) {
            return false;
        }
        // many more conditions will be added once more constrains are defined
        if (iz.block(treeToMatch.getInner()) && !iz.genericBlock(treeTemplate.getInner())) {
            if (treeTemplate.getInner().getUserData(KeyDescriptionParameters.NO_OF_STATEMENTS) != null &&
                    treeTemplate.getInner().getUserData(KeyDescriptionParameters.NO_OF_STATEMENTS)
                            .notConforms(az.block(treeToMatch.getInner()).getStatements().length)) {
                return false;
            }
        }

        boolean res = true;
        if (treeTemplate.getAmountOfNoneWhiteSpaceChildren() < treeToMatch.getAmountOfNoneWhiteSpaceChildren() && !iz.generic(treeTemplate.getInner())) {
            return false;
        }
        /*for (int i = 0; i < treeTemplate.getChildren().size(); i++){
            res = res && match(treeTemplate.getChildren().get(i), treeToMatch.getChildren().get(i));
        }*/
        for (EncapsulatingNode.Iterator treeTemplateChild = treeTemplate.iterator(),
             treeToMatchChild = treeToMatch.iterator();
             treeTemplateChild.hasNext() && treeToMatchChild.hasNext();
             treeTemplateChild.next(), treeToMatchChild.next()) {
            res = res && match(treeTemplateChild.value(), treeToMatchChild.value());
        }
        return res;
    }

}
