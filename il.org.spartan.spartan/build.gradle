apply plugin: 'java'
apply plugin: 'eclipse'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

// un-orthodox directory tree structure
sourceSets.main.java.srcDir 'src/'
sourceSets.test.java.srcDir 'src/'

repositories {
    mavenCentral()
}

repositories {
    flatDir {
        dirs 'lib'
    }
}

dependencies {
    compile files('lib/cli-1.01.jar')
    compile project(':il.org.spartan.fluent.ly')
    compile group: 'org.jetbrains', name: 'annotations', version: '13.0'
    compile 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.0.0'
    compile 'junit:junit:4.12'
    compile 'org.hamcrest:hamcrest-all:1.3'
}

/**
 * Generate RawTokenizer.java from Tokenizer.flex using JFlex executable (jar).
 * Throws it to the directory of Tokenizer.flex
 */
task makeRawTokenizer(type: JavaExec) {
    def jflexJar = "/lib/jflex-1.6.1.jar"
    def tokenizerFlex = "/src/il/org/spartan/java/Tokenizer.flex"

    main = "-jar"
    args = [
            project.getProjectDir().getPath() + jflexJar,
            "-v", // verbosely
            project.getProjectDir().getPath() + tokenizerFlex
    ]
}
// Adds dependency
compileJava.dependsOn makeRawTokenizer

eclipse {
    classpath {
        defaultOutputDir = file('target/classes')
    }
}
eclipse.classpath.file {
    whenMerged { classpath ->
        classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/', null))
        classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.Output('bin-spartan'))
    }
}
